{"version":3,"sources":["components/Result/Result.js","components/InputOne/InputOne.js","components/ComputeButton/ComputeButton.js","components/Operation/Operation.js","utils/api.js","components/Calculator/Calculator.js","containers/App.js","serviceWorker.js","index.js"],"names":["Result","props","react_default","a","createElement","className","value","InputOne","id","method","placeholder","onChange","ComputeButton","type","onClick","handleClick","status","operation","x","y","Operation","selectedClass","choice","replace","selected","route","click","api","callProxy","args","Array","prototype","slice","call","arguments","numTest","Number","some","undefined","isNaN","Promise","resolve","reject","code","message","axios","get","concat","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","ops1","ops","ops2","handleMap","components_Operation_Operation","handleOperator","state","key","setState","handleInputOne","e","target","handleInputTwo","handleApiCall","operator","then","res","result","data","catch","err","console","log","bind","assertThisInitialized","components_Result_Result","components_InputOne_InputOne","components_ComputeButton_ComputeButton","map","React","Component","App","components_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.527d4dd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\n// Result display will show the result of mathematical camputation ones performed by calculator:\r\nconst Result = props => {\r\n  return (\r\n    <div className=\"resultContainer\">\r\n      <div className=\"Result\">\r\n        <p> {props.value} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport \"./InputOne.css\";\r\n\r\n//First user input:\r\nconst InputOne = props => {\r\n  return (\r\n    <div className=\"form-group\" id=\"calculator-form\" method=\"GET\">\r\n      <label> </label>\r\n      <input\r\n        className=\"InputOne\"\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputOne;\r\n","import React from \"react\";\r\nimport \"./ComputeButton.css\";\r\n\r\n//Last button for user to press to submit for calculator to perform mathematical camputation on numbers:\r\nconst ComputeButton = props => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"ComputeButton\"\r\n      onClick={() =>\r\n        props.handleClick(\r\n          props.status.operation,\r\n          props.status.x,\r\n          props.status.y\r\n        )\r\n      }\r\n    >\r\n      Calculate!\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ComputeButton;\r\n","import React from \"react\";\r\nimport \"./Operation.css\";\r\n\r\n// Operation component which is responsible of each calcular operations such as addition,mult,div and ect.\r\n// Operation component changes it's color and camputation depending on operation performed on two numbers:\r\nconst Operation = props => {\r\n  const selectedClass = props.choice.replace(\"Operation\", \"selected\");\r\n  return (\r\n    <div>\r\n      {props.selected === props.route ? (\r\n        <button\r\n          type=\"button\"\r\n          className={selectedClass}\r\n          onClick={() => props.click(props.route)}\r\n        >\r\n          <div className=\"operationText\">\r\n            <p> {props.operation} </p>\r\n          </div>\r\n        </button>\r\n      ) : (\r\n        <button\r\n          type=\"button\"\r\n          className={props.choice}\r\n          onClick={() => props.click(props.route)}\r\n        >\r\n          <div className=\"operationText\">\r\n            <p> {props.operation} </p>\r\n          </div>\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Operation;\r\n","import axios from \"axios\";\r\nexport default {\r\n  callProxy: function(route, x, y) {\r\n    let args = Array.prototype.slice.call(arguments);\r\n    let numTest = Number(x) + Number(y);\r\n    const doesNotExist = x => x === undefined; // returns true\r\n\r\n    if (args.some(doesNotExist) || isNaN(numTest)) {\r\n      return new Promise((resolve, reject) => {\r\n        reject({\r\n          code: 400,\r\n          message: `Error: please make sure you specify two numbers and select an operator`\r\n        });\r\n      });\r\n    }\r\n    return axios.get(\r\n      `https://kevin-45c9c78a-eval-test.apigee.net/calculator-master/${route}?x=${x}&y=${y}`\r\n    );\r\n  }\r\n};\r\n","// !!IMPORTANT this file contains main functionally of the app and logic\r\nimport React from \"react\";\r\nimport \"./Calculator.css\";\r\nimport Result from \"../Result/Result\";\r\nimport Input from \"../InputOne/InputOne\";\r\nimport ComputeButton from \"../ComputeButton/ComputeButton\";\r\nimport Operation from \"../Operation/Operation\";\r\nimport api from \"../../utils/api\";\r\nimport ops from \"../../operations.json\";\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { result: \"\" };\r\n    this.handleInputOne = this.handleInputOne.bind(this);\r\n    this.handleInputTwo = this.handleInputTwo.bind(this);\r\n    this.handleOperator = this.handleOperator.bind(this);\r\n  }\r\n  ops1 = ops.slice(0, 3);\r\n  ops2 = ops.slice(3);\r\n\r\n  handleMap = x => {\r\n    return (\r\n      <Operation\r\n        choice={x.choice}\r\n        operation={x.operation}\r\n        route={x.route}\r\n        click={this.handleOperator}\r\n        selected={this.state.operation}\r\n        key={x.operation}\r\n      />\r\n    );\r\n  };\r\n\r\n  handleOperator = x => {\r\n    this.setState({ operation: x });\r\n  };\r\n\r\n  handleInputOne = e => {\r\n    this.setState({\r\n      x: e.target.value\r\n    });\r\n  };\r\n\r\n  handleInputTwo = e => {\r\n    this.setState({\r\n      y: e.target.value\r\n    });\r\n  };\r\n\r\n  handleApiCall = (operator, x, y) => {\r\n    api\r\n      .callProxy(operator, x, y)\r\n      .then(res => {\r\n        this.setState({ result: res.data });\r\n      })\r\n      .catch(err => {\r\n        if (err.code === 400) {\r\n          return this.setState({ result: err.message });\r\n        }\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculatorContainer\">\r\n        <div className=\"Calculator\">\r\n          {/* Result will display result of calculation performed by calculator: */}\r\n          <Result value={this.state.result} />\r\n          <div className=\"first\">\r\n            {/* First user input: */}\r\n            <Input onChange={this.handleInputOne} placeholder=\"First Value\" />\r\n            {/* Second user input: */}\r\n            <Input onChange={this.handleInputTwo} placeholder=\"Second Value\" />\r\n            {/* ComputeButton is basically submit button: */}\r\n            <ComputeButton\r\n              status={this.state}\r\n              handleClick={this.handleApiCall}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"operationsContainer\">\r\n            {this.ops1.map(this.handleMap)}\r\n          </div>\r\n          <div className=\"operationsContainer\">\r\n            {this.ops2.map(this.handleMap)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Calculator from \"../components/Calculator/Calculator\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Calculator> </Calculator>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}